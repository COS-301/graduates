// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

///////////////////////////////////////////////////////////////////////
// 1. User
///////////////////////////////////////////////////////////////////////

// All entities within the database is defined as users
model User {
  id           String    @id @default(cuid()) // Use CUIDs for IDs please
  email        String    @unique
  password     String?
  passwordSalt String?   @map("password_salt")
  name         String?
  dateOfBirth  DateTime? @map("date_of_birth")
  companyId    String?   @map("company_id")
  created      DateTime
  suspended    Boolean
  validated    Boolean

  company User? @relation(name: "company_id", fields: [companyId], references: [id])

  User             User[]            @relation("company_id")
  userScout        UserScouted[]     @relation("userScout")
  userScouted      UserScouted[]     @relation("userScouted")
  UserRole         UserRole[]
  UserPermissions  UserPermissions[]
  UserProfile      UserProfile[]
  UserTag          UserTag[]
  UserSocialMedia  UserSocialMedia[]
  UserLocation     UserLocation[]
  UserEmail        UserEmail[]
  UserProfileFile  UserProfileFile[]
  Story            Story[]
  StoryReport      StoryReport[]
  notificationFrom Notification[]    @relation("notificationFrom")
  notificationTo   Notification[]    @relation("notificationTo")
  Blog             Blog[]

  @@map("user")
}

///////////////////////////////////////////////////////////////////////
// 1.1 Scouting
///////////////////////////////////////////////////////////////////////

model UserScouted {
  userIdScout String    @id @map("user_id_scout")
  userId      String    @map("user_id")
  date        DateTime?

  userScout User @relation(name: "userScout", fields: [userIdScout], references: [id])
  user      User @relation(name: "userScouted", fields: [userId], references: [id])

  @@map("user_scouted")
}

///////////////////////////////////////////////////////////////////////
// 1.2 Roles and Permissions
///////////////////////////////////////////////////////////////////////

// The roles that the users are assigned to for default permissions
model UserRole {
  userId String @map("user_id")
  role   Role

  user User @relation(fields: [userId], references: [id])
  @@id([userId, role])
  @@map("user_role")
}

// Additional permissions users are assigned to
model UserPermissions {
  userId             String             @map("user_id")
  permissionType     PermissionType     @map("permission_type")
  permissionCategory PermissionCategory @map("permission_category")
  permissionTenant   PermissionTenant   @map("permission_tenant")

  user User @relation(fields: [userId], references: [id])
  @@id([userId, permissionType, permissionCategory, permissionTenant])
  @@map("user_permissions")
}

// The permissions each role has by default
model RolePermissions {
  role               Role
  permissionType     PermissionType     @map("permission_type")
  permissionCategory PermissionCategory @map("permission_category")
  permissionTenant   PermissionTenant   @map("permission_tenant")

  @@id([role, permissionType, permissionCategory, permissionTenant])
  @@map("role_permissions")
}

// Roles to define all the roles that are currently present in the application
enum Role {
  USER
  STUDENT
  COMPANY
  REPRESENTATIVE
  ADMIN
  SUSPENDED
}

// Type of permission that can be given to a user
enum PermissionType {
  CREATE
  EDIT
  REMOVE
  VIEW
  ARCHIVE
  SUSPEND
  ALL
}

// What the permission applies to
enum PermissionCategory {
  USER
  STUDENT
  COMPANY
  PROFILE
  STORY
  PERMISSIONS
  ROLE
  ALL
}

// What the permission is for
enum PermissionTenant {
  USER
  STUDENT
  COMPANY
  COUNT
  VIEWERS
  NONE
  ALL
}

///////////////////////////////////////////////////////////////////////
// 1.3 User Profile
///////////////////////////////////////////////////////////////////////

// Profile information for a user
model UserProfile {
  userId         String  @id @map("user_id")
  profilePicture String? @map("profile_picture")
  bio            String?

  user User @relation(fields: [userId], references: [id])
  @@map("user_profile")
}

// Tag on which to filter users
model UserTag {
  userId String @id @map("user_id")
  tag    String

  user User @relation(fields: [userId], references: [id])
  @@map("user_tag")
}

// Social Media links for users
model UserSocialMedia {
  userId String      @id @map("user_id")
  type   SocialMedia
  link   String

  user User @relation(fields: [userId], references: [id])
  @@map("user_social_media")
}

enum SocialMedia {
  TWITTER
  INSTAGRAM
  LINKEDIN
  FACEBOOK
  SNAPCHAT
  GITHUB
}

// Locations of users
model UserLocation {
  userId   String @id @map("user_id")
  location String

  user User @relation(fields: [userId], references: [id])
  @@map("user_location")
}

// Emails of users
model UserEmail {
  userId String @id @map("user_id")
  email  String

  user User @relation(fields: [userId], references: [id])
  @@map("user_email")
}

// File uploads of users
model UserProfileFile {
  fileId        String        @id @default(cuid()) @map("file_id")
  userId        String        @map("user_id")
  filePath      String        @map("file_path")
  fileCategory  FileCategory? @map("file_category")
  fileExtension String?       @map("file_extension")

  user User @relation(fields: [userId], references: [id])
  @@map("user_student_profile_file")
}

enum FileCategory {
  ACADEMIC_RECORD
  DEGREE
  MISC
  CV
  PROFILE_PHOTO
  VIDEO
}

///////////////////////////////////////////////////////////////////////
// 2. Story
///////////////////////////////////////////////////////////////////////

// Stories of users
model Story {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  media      String?
  data       String?
  datePosted DateTime @map("date_posted")
  archived   Boolean

  user User @relation(fields: [userId], references: [id])

  storyTag    StoryTag[]
  storyReport StoryReport[]
  @@map("story")
}

// Story tags to be filtered by
model StoryTag {
  storyId String @map("story_id")
  tag     String

  story Story @relation(fields: [storyId], references: [id])

  @@id([storyId, tag])
  @@map("story_tag")
}

// Story reports
model StoryReport {
  storyId String @map("story_id")
  userId  String @map("user_id")
  reason  String

  user  User  @relation(fields: [userId], references: [id])
  story Story @relation(fields: [storyId], references: [id])

  @@id([storyId, userId])
  @@map("story_report")
}

///////////////////////////////////////////////////////////////////////
// 3. Notification
///////////////////////////////////////////////////////////////////////

// User notifications
model Notification {
  id         String   @id @default(cuid())
  userIdFrom String?  @map("user_id_from")
  userIdTo   String   @map("user_id_to")
  data       Json?
  date       DateTime
  seen       Boolean

  notificationFrom User? @relation(name: "notificationFrom", fields: [userIdFrom], references: [id])
  notificationTo   User  @relation(name: "notificationTo", fields: [userIdTo], references: [id])

  @@map("notification")
}

///////////////////////////////////////////////////////////////////////
// 4. Blog
///////////////////////////////////////////////////////////////////////

// Blogs that up admin have posted
model Blog {
  id       String   @id @default(cuid())
  userId   String   @map("user_id")
  title    String
  content  String?
  date     DateTime
  archived Boolean

  user User @relation(fields: [userId], references: [id])

  blogComment BlogComment[]
  blogMedia   BlogMedia[]

  @@map("blog")
}

// Comments on the blog per blog_id
model BlogComment {
  id      String   @id @default(cuid())
  blogId  String   @map("blog_id")
  content String
  date    DateTime

  blog Blog @relation(fields: [blogId], references: [id])
  @@map("blog_comment")
}

// Media on the blog per blog_id
model BlogMedia {
  blogId String @map("blog_id")
  media  String

  blog Blog @relation(fields: [blogId], references: [id])

  @@id([blogId, media])
  @@map("blog_media")
}

///////////////////////////////////////////////////////////////////////
// Tests
///////////////////////////////////////////////////////////////////////

model Test {
  id    Int     @id @default(autoincrement())
  test1 String  @unique
  test2 String?
}

model CompanRepInfo{
  id Int @id @default(autoincrement())
  surname String
  job String
  experience String
  aboutMe String @map("about_me")
  location String
  companyName String @map("company_name")
  email String
  website String
  linkedlIn String @map("linked_in")
  gitHub String @map("git_hub")
  contactNumber String @map("contact_number")

  @@map("company_rep_info")
}