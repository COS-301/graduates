
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.11.0
 * Query Engine version: b371888aaf8f51357c7457d836b86d12da91658b
 */
Prisma.prismaVersion = {
  client: "3.11.0",
  engine: "b371888aaf8f51357c7457d836b86d12da91658b"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  password: 'password',
  passwordSalt: 'passwordSalt',
  name: 'name',
  dateOfBirth: 'dateOfBirth',
  companyId: 'companyId',
  created: 'created',
  suspended: 'suspended',
  validated: 'validated'
});

exports.Prisma.UserScoutedScalarFieldEnum = makeEnum({
  userIdScout: 'userIdScout',
  userId: 'userId',
  date: 'date'
});

exports.Prisma.UserRoleScalarFieldEnum = makeEnum({
  userId: 'userId',
  role: 'role'
});

exports.Prisma.UserPermissionsScalarFieldEnum = makeEnum({
  userId: 'userId',
  permissionType: 'permissionType',
  permissionCategory: 'permissionCategory',
  permissionTenant: 'permissionTenant'
});

exports.Prisma.RolePermissionsScalarFieldEnum = makeEnum({
  role: 'role',
  permissionType: 'permissionType',
  permissionCategory: 'permissionCategory',
  permissionTenant: 'permissionTenant'
});

exports.Prisma.UserProfileScalarFieldEnum = makeEnum({
  userId: 'userId',
  profilePicture: 'profilePicture',
  bio: 'bio',
  employmentStatus: 'employmentStatus',
  openToOffers: 'openToOffers'
});

exports.Prisma.UserTagScalarFieldEnum = makeEnum({
  userId: 'userId',
  tag: 'tag'
});

exports.Prisma.UserSocialMediaScalarFieldEnum = makeEnum({
  userId: 'userId',
  type: 'type',
  link: 'link'
});

exports.Prisma.UserLocationScalarFieldEnum = makeEnum({
  userId: 'userId',
  location: 'location'
});

exports.Prisma.UserEmailScalarFieldEnum = makeEnum({
  userId: 'userId',
  email: 'email'
});

exports.Prisma.UserProfileFileScalarFieldEnum = makeEnum({
  fileId: 'fileId',
  userId: 'userId',
  filePath: 'filePath',
  fileCategory: 'fileCategory',
  fileExtension: 'fileExtension'
});

exports.Prisma.UserDegreeScalarFieldEnum = makeEnum({
  userID: 'userID',
  degreeType: 'degreeType',
  degreeName: 'degreeName'
});

exports.Prisma.ShortScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  description: 'description',
  link: 'link',
  thumbnail: 'thumbnail',
  datePosted: 'datePosted',
  archived: 'archived'
});

exports.Prisma.ShortTagScalarFieldEnum = makeEnum({
  shortId: 'shortId',
  tag: 'tag'
});

exports.Prisma.ShortReportScalarFieldEnum = makeEnum({
  shortId: 'shortId',
  userId: 'userId',
  reason: 'reason'
});

exports.Prisma.NotificationScalarFieldEnum = makeEnum({
  id: 'id',
  userIdFrom: 'userIdFrom',
  userIdTo: 'userIdTo',
  data: 'data',
  date: 'date',
  seen: 'seen'
});

exports.Prisma.BlogScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  title: 'title',
  content: 'content',
  date: 'date',
  archived: 'archived'
});

exports.Prisma.BlogCommentScalarFieldEnum = makeEnum({
  id: 'id',
  blogId: 'blogId',
  userId: 'userId',
  content: 'content',
  date: 'date'
});

exports.Prisma.BlogMediaScalarFieldEnum = makeEnum({
  blogId: 'blogId',
  media: 'media'
});

exports.Prisma.UserTokenScalarFieldEnum = makeEnum({
  userId: 'userId',
  userToken: 'userToken',
  userTokenType: 'userTokenType',
  userTokenExpiration: 'userTokenExpiration'
});

exports.Prisma.TestScalarFieldEnum = makeEnum({
  id: 'id',
  test1: 'test1',
  test2: 'test2'
});

exports.Prisma.UserContactNumberScalarFieldEnum = makeEnum({
  userId: 'userId',
  number: 'number'
});

exports.Prisma.UserExperienceScalarFieldEnum = makeEnum({
  userId: 'userId',
  experience: 'experience'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.JsonNullValueInput = makeEnum({
  JsonNull: 'JsonNull'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull',
  AnyNull: 'AnyNull'
});
exports.Role = makeEnum({
  USER: 'USER',
  STUDENT: 'STUDENT',
  COMPANY: 'COMPANY',
  REPRESENTATIVE: 'REPRESENTATIVE',
  ADMIN: 'ADMIN',
  SUSPENDED: 'SUSPENDED'
});

exports.PermissionType = makeEnum({
  CREATE: 'CREATE',
  EDIT: 'EDIT',
  REMOVE: 'REMOVE',
  VIEW: 'VIEW',
  ARCHIVE: 'ARCHIVE',
  SUSPEND: 'SUSPEND',
  ALL: 'ALL'
});

exports.PermissionCategory = makeEnum({
  USER: 'USER',
  STUDENT: 'STUDENT',
  COMPANY: 'COMPANY',
  PROFILE: 'PROFILE',
  STORY: 'STORY',
  PERMISSIONS: 'PERMISSIONS',
  ROLE: 'ROLE',
  ALL: 'ALL'
});

exports.PermissionTenant = makeEnum({
  USER: 'USER',
  STUDENT: 'STUDENT',
  COMPANY: 'COMPANY',
  COUNT: 'COUNT',
  VIEWERS: 'VIEWERS',
  NONE: 'NONE',
  ALL: 'ALL'
});

exports.SocialMedia = makeEnum({
  TWITTER: 'TWITTER',
  INSTAGRAM: 'INSTAGRAM',
  LINKEDIN: 'LINKEDIN',
  FACEBOOK: 'FACEBOOK',
  SNAPCHAT: 'SNAPCHAT',
  GITHUB: 'GITHUB'
});

exports.FileCategory = makeEnum({
  ACADEMIC_RECORD: 'ACADEMIC_RECORD',
  DEGREE: 'DEGREE',
  MISC: 'MISC',
  CV: 'CV',
  PROFILE_PHOTO: 'PROFILE_PHOTO',
  VIDEO: 'VIDEO'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  UserScouted: 'UserScouted',
  UserRole: 'UserRole',
  UserPermissions: 'UserPermissions',
  RolePermissions: 'RolePermissions',
  UserProfile: 'UserProfile',
  UserTag: 'UserTag',
  UserSocialMedia: 'UserSocialMedia',
  UserLocation: 'UserLocation',
  UserEmail: 'UserEmail',
  UserProfileFile: 'UserProfileFile',
  UserDegree: 'UserDegree',
  Short: 'Short',
  ShortTag: 'ShortTag',
  ShortReport: 'ShortReport',
  Notification: 'Notification',
  Blog: 'Blog',
  BlogComment: 'BlogComment',
  BlogMedia: 'BlogMedia',
  UserToken: 'UserToken',
  Test: 'Test',
  UserContactNumber: 'UserContactNumber',
  UserExperience: 'UserExperience'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
